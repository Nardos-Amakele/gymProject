// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        String   @id @default(uuid())
  name      String
  phone     String
  startDate String
  jobType   String
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  category    String
  description String
  imageUrl    String?
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  customerName String
  phoneNumber  String
  quantity     Int
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Stock {
  id        String   @id @default(uuid())
  itemName  String
  category  String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  name      String
  category  String
  amount    Float
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id       String   @id @default(uuid())
  memberId String
  date     DateTime @default(now())
  user     User     @relation(fields: [memberId], references: [id])

  @@unique([memberId, date])
}

model Service {
  id          String   @id @default(uuid())
  name        String
  period      Int
  maxDays     Int
  price       Float
  category    String
  description Json
  preferred   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]
}

model User {
  id                 String               @id @default(uuid())
  fullName           String
  gender             String
  phoneNumber        String               @unique
  email              String?
  address            String
  dob                DateTime
  emergencyContact   String
  firstRegisteredAt  DateTime             @default(now())
  startDate          DateTime             @default(now())
  totalAttendance    Int                  @default(0)
  remainingDays      Int                  @default(0)
  countDown          Int?
  height             Float?
  weight             Float?
  bmi                Float?
  healthConditions   Json?
  level              String?
  goal               String?
  status             String               @default("pending")
  freezeDate         DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  serviceId          String?
  service            Service?             @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  attendance         Attendance[]
  profileImageUrl    String?
  workouts           UserWorkout[]
  exercisesCompleted ExerciseCompletion[]
  lastWorkoutDate    DateTime?
  currentStreak      Int                  @default(0)
  highestStreak      Int                  @default(0)
}

model Workout {
  id             String        @id @default(uuid())
  name           String        @unique
  slug           String
  difficulty     String
  mainGoal       String
  workoutType    String
  duration       Int
  daysPerWeek    Int
  timePerWorkout Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  targetGender   String?
  exercises      Exercise[]    @relation("WorkoutExercises")
  users          UserWorkout[]
}

model Exercise {
  id                  String               @id @default(cuid())
  slug                String               @unique
  name                String               @unique
  description         String
  reps                Int?
  sets                Int?
  duration            Int
  videoUrl            String?
  focusArea           FocusArea?
  equipments          Equipment[]
  workouts            Workout[]            @relation("WorkoutExercises")
  exerciseCompletions ExerciseCompletion[]
}

model UserWorkout {
  id         String    @id @default(uuid())
  userId     String
  workoutId  String
  startedAt  DateTime  @default(now()) // When the workout was started
  progress   Int? // Percentage or stage of workout completion
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout    Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model ExerciseCompletion {
  id          String   @id @default(uuid())
  userId      String
  exerciseId  String
  completedAt DateTime @default(now()) // When the exercise was completed
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

enum FocusArea {
  Chest
  Back
  Legs
  Arms
  Core
  Shoulders
  FullBody
  Other
  UpperBody
  LowerBody
}

model Equipment {
  id         String   @id @default(cuid())
  name       String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model MealPlan {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Meals       Meal[]   @relation("MealPlanMeal")
}

model Meal {
  id              String       @id @default(cuid())
  name            String
  slug            String
  description     String
  category        String
  ingredients     Ingredient[]
  instructions    String
  calories        MealCategory
  vegan           Boolean
  preparationTime Int
  protein         Float?
  carbs           Float?
  fats            Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  MealPlans       MealPlan[]   @relation("MealPlanMeal")
}

model Ingredient {
  id       String  @id @default(cuid())
  name     String
  quantity String?
  mealId   String
  meal     Meal    @relation(fields: [mealId], references: [id])
}

enum MealCategory {
  Breakfast
  lunch
  dinner
  snack
  other
}
